<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- Permettre la configuration via des annotations -->
	<mvc:annotation-driven />
	<context:component-scan base-package="net.fenyo.franceconnect" />

<!-- http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html -->
<context:property-placeholder location="META-INF/config.properties"/>

	<!-- Handles HTTP GET requests for /static/** by efficiently serving up static resources in the ${webappRoot}/static directory -->
	<mvc:resources mapping="/static/**" location="/static/" />

    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/html-needauth/**" location="/html-needauth/" />
    <mvc:resources mapping="/html-noauth/**" location="/html-noauth/" />
    <mvc:resources mapping="/html/**" location="/html-noauth/" />
    <mvc:resources mapping="/jsp-needauth/**" location="/jsp-needauth/" />
    <mvc:resources mapping="/jsp-noauth/**" location="/jsp-noauth/" />
    <!-- marche pas -->
    <mvc:resources mapping="/jsp/**" location="/jsp-noauth/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
          <property name="prefix" value="/WEB-INF/views/" />
          <property name="suffix" value=".jsp" />
	</bean>

	<!-- Inject the UserInfo into the current context -->
	<mvc:interceptors>
          <bean class="org.mitre.openid.connect.web.UserInfoInterceptor" />
	</mvc:interceptors>
	
	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="authenticationManager" />

	<bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider" />

	<security:authentication-manager alias="authenticationManager">
	  <security:authentication-provider ref="openIdConnectAuthenticationProvider" />
	</security:authentication-manager>

	<bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />

	<bean class="org.mitre.openid.connect.client.service.impl.StaticSingleIssuerService" id="staticIssuerService">
		<property name="issuer" value="${net.fenyo.franceconnect.config.oidc.issuer}" />
	</bean>	

	<bean class="org.mitre.openid.connect.client.service.impl.StaticServerConfigurationService" id="staticServerConfigurationService">
		<property name="servers">
			<map>
				<entry key="${net.fenyo.franceconnect.config.oidc.issuer}">
					<bean class="org.mitre.openid.connect.config.ServerConfiguration">
						<property name="issuer" value="${net.fenyo.franceconnect.config.oidc.issuer}" />
						<property name="authorizationEndpointUri" value="${net.fenyo.franceconnect.config.oidc.authorizationendpointuri}" />
						<property name="tokenEndpointUri" value="${net.fenyo.franceconnect.config.oidc.tokenendpointuri}" />
						<property name="userInfoUri" value="${net.fenyo.franceconnect.config.oidc.userinfouri}" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<bean class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService" id="staticClientConfigurationService">
		<property name="clients">
			<map>
				<entry key="${net.fenyo.franceconnect.config.oidc.issuer}">
					<bean class="org.mitre.oauth2.model.RegisteredClient">
						<property name="scope">
						  <set value-type="java.lang.String">
						    <value>openid</value>
						    <value>gender</value>
						    <value>birthdate</value>
						    <value>birthcountry</value>
						    <value>birthplace</value>
						    <value>given_name</value>
						    <value>family_name</value>
						    <value>email</value>
						    <value>address</value>
						    <value>preferred_username</value>
						    <value>phone</value>
						    <!-- <value>profile</value> -->
						  </set>
						</property>
 						<property name="tokenEndpointAuthMethod" value="SECRET_POST" />
						<property name="clientId" value="${net.fenyo.franceconnect.config.oidc.clientid}" />
						<property name="clientSecret" value="${net.fenyo.franceconnect.config.oidc.clientsecret}" />
						<property name="redirectUris">
						<set>
						  <value>${net.fenyo.franceconnect.config.oidc.redirecturi}</value>
					    </set>
						</property>
				</bean>
				</entry>
			</map>
  		</property>
	</bean>

	<bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="issuerService" ref="staticIssuerService" />
 		<property name="serverConfigurationService" ref="staticServerConfigurationService" />
		<property name="clientConfigurationService" ref="staticClientConfigurationService" />
		<property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder" />
	</bean>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
           <constructor-arg value="/openid_connect_login" />
	</bean>

<!-- http://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/reference/htmlsingle/ -->
	<security:http auto-config="false" use-expressions="true" disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint" pattern="/**">
        <security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />
        <security:logout logout-url="/j_spring_security_logout" /> 

    <security:intercept-url pattern="/html-needauth/*" access="isFullyAuthenticated()"/>
    <security:intercept-url pattern="/jsp-needauth/*" access="isFullyAuthenticated()"/>
    
<!-- 

http://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/reference/htmlsingle/#tech-intro-auth-entry-point

Attributes
    delete-cookies A comma-separated list of the names of cookies which should be deleted when the user logs out. 
    invalidate-session Maps to the invalidateHttpSession of the SecurityContextLogoutHandler. Defaults to "true", so the session will be invalidated on logout. 
    logout-success-url The destination URL which the user will be taken to after logging out. Defaults to <form-login-login-page>/?logout (i.e. /login?logout)
    Setting this attribute will inject the SessionManagementFilter with a SimpleRedirectInvalidSessionStrategy configured with the attribute value. When an invalid session ID is submitted, the strategy will be invoked, redirecting to the configured URL.
    logout-url The URL which will cause a logout (i.e. which will be processed by the filter). Defaults to "/logout". 
    success-handler-ref May be used to supply an instance of LogoutSuccessHandler which will be invoked to control the navigation after logging out. 
    
protected void configure(HttpSecurity http) throws Exception {
    http
        .logout()                                                                1
            .logoutUrl("/my/logout")                                                 2
            .logoutSuccessUrl("/my/index")                                           3
            .logoutSuccessHandler(logoutSuccessHandler)                              4
            .invalidateHttpSession(true)                                             5
            .addLogoutHandler(logoutHandler)                                         6
            .deleteCookies(cookieNamesToClear)                                       7
            .and()
        ...
}
 -->

	</security:http>

</beans>
    